image: registry.choerodon.xforceplus.com/rjzjh/duckula
imageTaskTag: task.2.0.9
imagePullPolicy: IfNotPresent
#运行的命令 docker-run.sh:监听mysql  docker-consumer.sh：kafka监听  docker-dump.sh: 全量导入
cmd:  docker-run.sh
#zk与taskid都是必填的
env:
  #taskid: demo-docker
  #rootpath: /duckula-k8s
  #zk: localhost:2181
  
## set to `now` to get a one time job, or a cronjob schedule like `0 0 * * *`
## set to `nojob`  不是job
#schedule: "0/5 * * * *"
schedule: nojob

## 在schedule不是now和nojob时有效
successfulJobsHistoryLimit: 2
failedJobsHistoryLimit: 2

hosts:
- {ip: 192.168.51.16,host: [zk1]}
- {ip: 192.168.51.17,host: [zk2]}
- {ip: 192.168.51.18,host: [zk3]}

- {ip: 192.168.50.95,host: [node-es5]}
- {ip: 192.168.50.92,host: [node-es2]}
- {ip: 192.168.50.91,host: [node-es1]}
- {ip: 192.168.50.94,host: [node-es4]}
- {ip: 192.168.50.93,host: [node-es3]}

- {ip: 172.18.203.10,host: [seller-node-es1]}
- {ip: 172.18.203.14,host: [seller-node-es2]}
- {ip: 172.18.203.12,host: [seller-node-es3]}
- {ip: 172.18.203.13,host: [seller-node-es4]}
- {ip: 172.18.203.11,host: [seller-node-es5]}
 
service:
  type: ClusterIP
  jmxexport:
    port: 8080
    # nodePort: 32000
  debugport:
    port: 2780
    # nodePort: 32001
#持久化
persistence:
  enabled: false
  #设置ops的持久化卷，必须设置，如果enabled为fals将是全新安装不能与ops建立连接
  #existingClaim: duckula
  annotations: {}  
  
userconfig:
  root:
    zk.properties: |-
      common.others.zookeeper.constr=192.168.51.16:2181,192.168.51.17:2181,192.168.51.18:2181
      #二次重试眨眼时间
      common.others.zookeeper.sleepTimeMs=1000
      #最大重试次数
      common.others.zookeeper.maxRetries=5
      common.others.zookeeper.sessionTimeoutMs=9000
      common.others.zookeeper.connectionTimeoutMs=60000
      #duckula使用的根目录
      duckula.zk.rootpath=/duckula-k8s
  es:
    es-dev.properties: |-
      #此配置为示例，请修改为实际中使用的配置,对于k8s，在各相关的configmap中进行配置，
      common.es.host.name=node-es1,node-es2,node-es3,node-es4,node-es5
      common.es.cluster.name=es-xforceplus
      common.es.host.port.rest=9200
      common.es.host.port.transport=9300
      common.es.host.scheme=http
      #ping命令响应的超时时间
      common.es.client.transport.ping_timeout=5s
      #检查节点可用性的时间间隔
      common.es.client.transport.nodes_sampler_interval=5s
      common.es.http.head=header=value&
      #The default value is 30 seconds 与socket timeout相同，如果socket timeout设置了，则它失效
      common.es.http.maxRetryTimeoutMillis=30000
      common.es.http.connectTimeout=1000
      common.es.http.socketTimeout=30000
      common.es.http.connectionRequestTimeout=500
      #查询时的超时
      common.es.query.timeout=5000
      #以下为默认值，如果在api中没有设置相关值，则默认值起做用
      common.es.query.index=null
      common.es.query.type=_doc
      common.es.http.aync.maxConnTotal=100
      common.es.http.aync.maxConnPerRoute=100
      middleware.version=6
    es-seller.properties: |-
      #此配置为示例，请修改为实际中使用的配置,对于k8s，在各相关的configmap中进行配置，
      common.es.host.name=seller-node-es1,seller-node-es2,seller-node-es3,seller-node-es4,seller-node-es5
      common.es.cluster.name=es-xforceplus-openapi
      common.es.host.port.rest=9200
      common.es.host.port.transport=9300
      common.es.host.scheme=http
      #ping命令响应的超时时间
      common.es.client.transport.ping_timeout=5s
      #检查节点可用性的时间间隔
      common.es.client.transport.nodes_sampler_interval=5s
      common.es.http.head=header=value&
      #The default value is 30 seconds 与socket timeout相同，如果socket timeout设置了，则它失效
      common.es.http.maxRetryTimeoutMillis=30000
      common.es.http.connectTimeout=1000
      common.es.http.socketTimeout=30000
      common.es.http.connectionRequestTimeout=500
      #查询时的超时
      common.es.query.timeout=5000
      #以下为默认值，如果在api中没有设置相关值，则默认值起做用
      common.es.query.index=null
      common.es.query.type=_doc
      common.es.http.aync.maxConnTotal=100
      common.es.http.aync.maxConnPerRoute=100
      middleware.version=6  
  kafka:
    kafka-dev.properties: |-
      #kafka示例配置，请修改为实际中使用的配置,对于k8s，在各相关的configmap中进行配置，
      common.others.kafka.common.bootstrap.servers=kafka_hp_01:9092,kafka_hp_02:9092,kafka_hp_03:9092
      #kafka producer props
      common.others.kafka.producer.acks=1
      common.others.kafka.producer.retries=2147483647
      common.others.kafka.producer.max.block.ms=9223372036854775807L
      common.others.kafka.producer.max.in.flight.requests.per.connection=1
      common.others.kafka.producer.linger.ms=10
      common.others.kafka.producer.batch.size=102400
      #32M
      common.others.kafka.producer.buffer.memory=33554432
      common.others.kafka.producer.compression.type=none
      common.others.kafka.producer.max.request.size=1048576
      common.others.kafka.producer.receive.buffer.bytes=32768
      common.others.kafka.producer.request.timeout.ms=30000
      common.others.kafka.producer.send.buffer.bytes=131072
      common.others.kafka.producer.connections.max.idle.ms=540000
      #kafka consumer props
      common.others.kafka.consumer.group.id=tams-group
      common.others.kafka.consumer.enable.auto.commit=true
      common.others.kafka.consumer.auto.commit.interval.ms=1000
      common.others.kafka.consumer.session.timeout.ms=30000
      common.others.kafka.consumer.auto.offset.reset=earliest
  redis:
    redis-dev.properties: |-
      #Redis配置示例，请修改为实际中使用的配置,对于k8s，在各相关的configmap中进行配置，
      #common.redis.redisserver.host=localhost
      #common.redis.redisserver.port=6379
      #创建池的超时时间
      common.redis.redisserver.timeout=2000
      #获取Jedis连接的最大等待时间（10秒）   
      common.redis.redisserver.maxWaitMillis=10000
      #设置最大连接数
      common.redis.redisserver.maxTotal=200
      #最大空闲连接数 
      common.redis.redisserver.maxIdle=20
      #在将连接放回池中前
      common.redis.redisserver.testOnBorrow=true
      #自动测试池中的空闲连接是否都是可用连接  
      common.redis.redisserver.testWhileIdle=true
      common.redis.redisserver.defaultDb=0
      common.redis.redisserver.password=null
      #最小连接数
      common.redis.redisserver.minIdle=0
      common.redis.redisserver.minEvictableIdleTimeMillis=13000
      common.redis.redisserver.softMinEvictableIdleTimeMillis=13000
      common.redis.redisserver.numTestsPerEvictionRun=3
      common.redis.redisserver.testOnReturn=false
      common.redis.redisserver.timeBetweenEvictionRunsMillis=60000
      common.redis.redisserver.blockWhenExhausted=true
      #是否要治理连接汇漏
      common.redis.redisserver.leak.enable=false
      #设置客户端名称
      common.redis.redisserver.clientName=tams
      #cachecloud配置
      common.redis.cachecloud.client_version = 1.2.0
      common.redis.cachecloud.domain_url = http://118.31.67.136:9218
      common.redis.cachecloud.redis_cluster_suffix = /cache/client/redis/cluster/%s.json?clientVersion=
      common.redis.cachecloud.redis_sentinel_suffix = /cache/client/redis/sentinel/%s.json?clientVersion=
      common.redis.cachecloud.redis_standalone_suffix = /cache/client/redis/standalone/%s.json?clientVersion=
      common.redis.cachecloud.cachecloud_report_url = /cachecloud/client/reportData.json
    
    
podAnnotations: {}

#dump请调整此资源
resources:
  requests:
    memory: 320Mi
    cpu: 1000m
  limits:
    memory: 512Mi
    cpu:  1000m

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3